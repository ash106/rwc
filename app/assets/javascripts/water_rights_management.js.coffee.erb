$(".water_rights_management-dashboard").ready ->
  # Called when the dashboard user selectbox changes
  $('#dashboard-user-selector').change (e) ->
    window.location.href = "/wrm-dashboard/#{$(this).val()}"
  $('#water-rights-table').DataTable
    pagingType: 'simple_numbers',
    responsive: true,
    columnDefs: [
      orderable: false, 
      targets: [11,12,13]
    ]
  $('#place-of-use-areas-table').DataTable
    pagingType: 'simple_numbers',
    responsive: true,
    columnDefs: [
      orderable: false, 
      targets: [1,2,3,4]
    ]
  $('#point-of-diversions-table').DataTable
    pagingType: 'simple_numbers',
    responsive: true,
    columnDefs: [
      orderable: false, 
      targets: [1,2,3,4]
    ]

$(".water_rights_management-show_water_rights").ready ->
  wr_table = $("#water_rights_table").DataTable
                pagingType: 'simple_numbers'
                dom: "<'row'<'col-sm-6'B><'col-sm-6'f>>" +
                     "<'row'<'col-sm-12'tr>>" +
                     "<'row'<'col-sm-5'i><'col-sm-7'p>>"
                buttons: [ 
                  {
                    extend: 'copy',
                    exportOptions: {
                      columns: ':visible'
                    }
                  }
                  {
                    extend: 'csv',
                    exportOptions: {
                      columns: ':visible'
                    }
                  }
                  {
                    extend: 'excel',
                    exportOptions: {
                      columns: ':visible'
                    }
                  }
                  {
                    extend: 'pdf',
                    exportOptions: {
                      columns: ':visible'
                    }
                  }
                  {
                    extend: 'print',
                    exportOptions: {
                      columns: ':visible'
                    }
                  }
                  {
                    extend: 'colvis',
                    columns: [0,1,2,3,4,5,6,7,8]
                  }
                ]
                columnDefs: [
                  {
                    visible: false
                    searchable: false
                    targets: 9
                  }
                  {
                    type: "html"
                    targets: 0
                  }
                ]

  setCommentsReadmore = ->
    $('.comments').readmore
      collapsedHeight: 20
      heightMargin: 30
      moreLink: '<a href="#">...</a>'

  setUsesReadmore = ->
    $('.uses').readmore
      collapsedHeight: 20
      heightMargin: 30
      moreLink: '<a href="#">...</a>'

  wr_table.on 'order.dt', -> setCommentsReadmore()
  wr_table.on 'search.dt', -> setCommentsReadmore()
  wr_table.on 'page.dt', -> setCommentsReadmore()
  wr_table.on 'draw.dt', -> setCommentsReadmore()

  wr_table.on 'order.dt', -> setUsesReadmore()
  wr_table.on 'search.dt', -> setUsesReadmore()
  wr_table.on 'page.dt', -> setUsesReadmore()
  wr_table.on 'draw.dt', -> setUsesReadmore()

  # Basic map options object
  mapOptions =
    center: new google.maps.LatLng(40.5999605, -111.747028)
    zoom: 9
    mapTypeId: google.maps.MapTypeId.ROADMAP

  # Create the map
  map = new google.maps.Map($("#map_canvas.water_rights")[0], mapOptions)
  
  # Create bounds to focus map on the added geometry
  bounds = new google.maps.LatLngBounds()

  # Empty array that will be used to store water rights
  water_rights = []

  #Geometry style settings
  polygon_color = '#76b5c6'
  point_icon_url = 'https://cdn1.iconfinder.com/data/icons/Map-Markers-Icons-Demo-PNG/48/Map-Marker-Marker-Outside-Azure.png'

  feature_index = 0
  num_of_features = 0

  # Load GeoJSON based on current_user ID, which defaults to 0 if no user is signed in
  $.getJSON "/get-water-rights-data/#{$('#water_rights_table_body').data('user')}.json", (data) ->
    feature_index = 0
    num_of_features = data.features.length
    map.data.addGeoJson data

  #Date formatter for water rights dates in table
  date_formatter = (date) ->
    if date
      d = date.split("-")[2]
      m = date.split("-")[1]
      y = date.split("-")[0]
      m + "/" + d + "/" + y
    else
      ""

  # Called when 'View' button is clicked in a table row
  $('#water_rights_table_body').on 'click', 'td a.show-link', (e) ->
    e.preventDefault()
    # Reset styling for map features
    map.data.revertStyle()
    # Get number from clicked water right link
    clicked_wr_number = $(this).attr 'href'
    # Remove highlighted class from all table rows
    $('#water_rights_table_body > tr').each ->
      $(this).removeClass 'highlighted'
    # Add highlighted class only to row containing clicked link
    $(this).parent().parent().addClass 'highlighted'
    # Create bounds for features associated with clicked water right
    selected_bounds = new google.maps.LatLngBounds()
    # Set styling for features associated with clicked water right
    map.data.forEach (feature) ->
      # Get water rights associated with current feature
      feature_wrs = feature.getProperty "water_rights"
      # Get array of water right numbers associated with current feature
      feature_wr_numbers = _.pluck(feature_wrs, 'number')
      # If feature_wr_numbers contains clicked water right number, set styling on feature
      if _.contains(feature_wr_numbers, clicked_wr_number)
        # If feature is a polygon, set fill color and stroke color
        if feature.getGeometry().getType() == "Polygon"
          map.data.overrideStyle feature, fillColor: (feature.getProperty("color") or polygon_color), strokeColor: (feature.getProperty("color") or polygon_color)
          # Extend bounds for each point in polygon
          points = feature.getGeometry().getAt(0).getArray()
          for point in points
            selected_bounds.extend point
        # If feature is a point, set icon
        if feature.getGeometry().getType() == "Point"
          map.data.overrideStyle feature, icon: point_icon_url
          # Extend bounds for point
          selected_bounds.extend feature.getGeometry().get()
    # Zoom map to bounds for features associated with clicked water right
    map.fitBounds selected_bounds
    # If zoomed in on a single point, zoom out a few levels
    if map.getZoom() >= 20
      map.setZoom 15

  # Called when each feature is added to the map
  map.data.addListener 'addfeature', (e) ->
    feature_index++
    # If feature is a polygon, add all points of polygon to map bounds
    if e.feature.getGeometry().getType() == "Polygon"
      # Get array of points that make up outer linear ring of polygon
      points = e.feature.getGeometry().getAt(0).getArray()
      # Extend bounds for each point
      for point in points
        bounds.extend point
    # If feature is a point, add single point to map bounds
    if e.feature.getGeometry().getType() == "Point"
      bounds.extend e.feature.getGeometry().get()
    # Fit map bounds to added geometry
    map.fitBounds bounds
    # Get water rights property for the added feature
    wrs = e.feature.getProperty "water_rights"
    # Push each water right onto the main array
    for wr in wrs
      water_rights.push wr
    if feature_index == num_of_features
      # These 3 functions should only be run once, but can't figure out how to not run them after every feature
      # Get rid of duplicates
      water_rights = _.uniq water_rights, (wr) ->
                        wr.number
      wr_table.clear()
      # Add water rights to table
      formatted_water_rights = _.map water_rights, (wr) ->
                                if wr.external_link
                                  number = "<a target='_blank' href='#{wr.external_link}'>#{wr.number}</a>"
                                else
                                  number = wr.number
                                if wr.view_link_text
                                  view_link_text = wr.view_link_text
                                else
                                  view_link_text = "Show"
                                [
                                  number
                                  date_formatter(wr.priority_date)
                                  wr.change_application_number
                                  date_formatter(wr.proof_due_date)
                                  "<a href='#{wr.number}' class='show-link'>#{view_link_text}</a>"
                                  wr.flow_cfs
                                  wr.flow_ac_ft
                                  "<div class='uses'>#{wr.uses}</div>"
                                  "<div class='comments'>#{wr.comments}</div>"
                                  "" # associated column
                                ]
      wr_table.rows.add(formatted_water_rights).draw()
      for wr in water_rights
        context = 
          wr: wr
          date_formatter: date_formatter

  # Called when a feature (piece of geometry) is clicked
  map.data.addListener 'click', (e) ->
    # Clear search box to show all water rights again
    wr_table.search('')
    associated_water_rights = []
    nonassociated_water_rights = []
    # Reset styling for map features 
    map.data.revertStyle()
    # If clicked feature is a polygon, set fill color and stroke color
    if e.feature.getGeometry().getType() == "Polygon"
      map.data.overrideStyle e.feature, fillColor: (e.feature.getProperty("color") or polygon_color), strokeColor: (e.feature.getProperty("color") or polygon_color)
    # If clicked feature is a point, set icon
    if e.feature.getGeometry().getType() == "Point"
      map.data.overrideStyle e.feature, icon: point_icon_url
    # Get water rights for clicked feature
    clicked_water_rights = e.feature.getProperty "water_rights"
    # Get array of water right numbers for clicked feature
    clicked_wr_numbers = _.pluck(clicked_water_rights, 'number')
    # Clear water rights table before appends
    wr_table.clear()
    # Re-add water rights to table, highlighting the ones associated with the clicked feature
    for wr in water_rights
      # If current water right number is in clicked_wr_numbers, add the highlighted class and append
      if _.contains(clicked_wr_numbers, wr.number)
        associated_water_rights.push wr
      # Otherwise add the water right without the highlighted class after appending all highlighted water rights first
      else
        nonassociated_water_rights.push wr
    associated_water_rights = _.map associated_water_rights, (wr) ->
                              if wr.external_link
                                number = "<a target='_blank' href='#{wr.external_link}'>#{wr.number}</a>"
                              else
                                number = wr.number
                              if wr.view_link_text
                                view_link_text = wr.view_link_text
                              else
                                view_link_text = "Show"
                              [
                                number
                                date_formatter(wr.priority_date)
                                wr.change_application_number
                                date_formatter(wr.proof_due_date)
                                "<a href='#{wr.number}' class='show-link'>#{view_link_text}</a>"
                                wr.flow_cfs
                                wr.flow_ac_ft
                                "<div class='uses'>#{wr.uses}</div>"
                                "<div class='comments'>#{wr.comments}</div>"
                                true
                              ]
    wr_table.rows.add(associated_water_rights).draw().nodes().to$().addClass 'highlighted'
    nonassociated_water_rights = _.map nonassociated_water_rights, (wr) ->
                              if wr.external_link
                                number = "<a target='_blank' href='#{wr.external_link}'>#{wr.number}</a>"
                              else
                                number = wr.number
                              if wr.view_link_text
                                view_link_text = wr.view_link_text
                              else
                                view_link_text = "Show"
                              [
                                number
                                date_formatter(wr.priority_date)
                                wr.change_application_number
                                date_formatter(wr.proof_due_date)
                                "<a href='#{wr.number}' class='show-link'>#{view_link_text}</a>"
                                wr.flow_cfs
                                wr.flow_ac_ft
                                "<div class='uses'>#{wr.uses}</div>"
                                "<div class='comments'>#{wr.comments}</div>"
                                false
                              ]
    wr_table.rows.add(nonassociated_water_rights).draw()
    wr_table.order([9, 'desc']).draw()

  # Called when the user selectbox changes
  $('#user-selector').change (e) ->
    # Clear search box to show all water rights again
    wr_table.search('')
    # Remove previous GeoJSON features
    map.data.forEach (feature) ->
      map.data.remove feature
    # Reset map bounds
    bounds = new google.maps.LatLngBounds()
    # Reset water_rights array
    water_rights = []
    # Load new data based on selected user_id
    $.getJSON "/get-water-rights-data/#{$(this).val()}.json", (data) ->
      feature_index = 0
      num_of_features = data.features.length
      map.data.addGeoJson data
